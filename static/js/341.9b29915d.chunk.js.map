{"version":3,"file":"static/js/341.9b29915d.chunk.js","mappings":"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","sources":["modules/AuthForm/initialState.js","modules/AuthForm/fieldsType.js","modules/AuthForm/AuthForm.jsx","pages/authPage/AuthPage.jsx","shared/components/InputField/InputField.jsx","shared/components/Message.jsx","shared/hooks/useForm.js"],"sourcesContent":["const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","const fields = {\n  name: {\n    name: 'name',\n    type: 'text',\n    required: true,\n    label: 'User name',\n    placeholder: 'User name',\n  },\n  email: {\n    name: 'email',\n    type: 'email',\n    required: true,\n    label: 'User email',\n    placeholder: 'User email',\n  },\n  password: {\n    name: 'password',\n    type: 'password',\n    required: true,\n    label: 'User password',\n    placeholder: 'User password',\n  },\n};\n\nexport default fields;\n","import useForm from 'shared/hooks/useForm';\nimport initialState from './initialState';\nimport fields from './fieldsType';\nimport InputField from 'shared/components/InputField/InputField';\nimport { Box } from '@mui/material';\nimport { isAuthLoading, resetMessage } from 'redux/auth/auth-selectors';\nimport SendIcon from '@mui/icons-material/Send';\nimport { LoadingButton } from '@mui/lab';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { resetError } from 'redux/auth/auth-operations';\nimport { useState, useEffect } from 'react';\nimport Message from 'shared/components/Message';\n\nconst AuthForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const [message, setMessage] = useState({\n    open: false,\n    text: '',\n  });\n  const error = useSelector(resetMessage);\n\n  const dispatch = useDispatch();\n\n  const loading = useSelector(isAuthLoading);\n\n  const { name, email, password } = state;\n\n  useEffect(() => {\n    if (error) {\n      setMessage({\n        open: true,\n        text: `User with Email ${email} exist`,\n      });\n      dispatch(resetError());\n      return;\n    }\n  }, [error, dispatch, email]);\n\n  return (\n    <Box\n      component=\"form\"\n      maxWidth=\"300px\"\n      margin=\"0 auto\"\n      onSubmit={handleSubmit}\n      padding={3}\n    >\n      <InputField {...fields.name} onChange={handleChange} value={name} />\n      <InputField {...fields.email} onChange={handleChange} value={email} />\n      <InputField\n        {...fields.password}\n        onChange={handleChange}\n        value={password}\n      />\n      <LoadingButton\n        sx={{ margin: '30px auto 0', display: 'flex' }}\n        type=\"submit\"\n        endIcon={<SendIcon />}\n        loading={loading}\n        loadingPosition=\"end\"\n        variant=\"contained\"\n      >\n        <span>Register</span>\n      </LoadingButton>\n      <Message\n        isOpen={message.open}\n        handleClose={() => setMessage({ open: false, text: '' })}\n      >\n        {message.text}\n      </Message>\n    </Box>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from 'modules/AuthForm/AuthForm';\nimport { signup } from 'redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\n\nconst AuthPage = () => {\n  const dispatch = useDispatch();\n\n  const handleSignup = data => {\n    dispatch(signup(data));\n  };\n\n  return (\n    <div>\n      <AuthForm onSubmit={handleSignup} />\n    </div>\n  );\n};\nexport default AuthPage;\n","import { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\n\nimport { TextField } from '@mui/material';\n\nconst InputField = ({ label, handleChange, ...otherProps }) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <>\n      <label htmlFor={id}>\n        <TextField\n          sx={{ width: '100%', padding: '10px 0' }}\n          label={label}\n          variant=\"standard\"\n          id={id}\n          onChange={handleChange}\n          {...otherProps}\n        />\n      </label>\n    </>\n  );\n};\n\nexport default InputField;\n","import { Alert, Snackbar } from '@mui/material';\n\nfunction Message({ children, isOpen, handleClose }) {\n  return (\n    <Snackbar\n      open={isOpen}\n      onClose={handleClose}\n      autoHideDuration={3000}\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n    >\n      <Alert\n        sx={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          width: '320px',\n          height: '50px',\n          backgroundColor: 'rgb(235 163 163)',\n        }}\n        severity=\"error\"\n      >\n        {children}\n      </Alert>\n    </Snackbar>\n  );\n}\n\nexport default Message;\n","import { useState, useCallback } from 'react';\n\nconst useForm = ({ onSubmit, initialState }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n\n    // setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n"],"names":["name","email","password","type","required","label","placeholder","onSubmit","useForm","initialState","state","handleChange","handleSubmit","useState","open","text","message","setMessage","error","useSelector","resetMessage","dispatch","useDispatch","loading","isAuthLoading","useEffect","resetError","Box","component","maxWidth","margin","padding","InputField","fields","onChange","value","LoadingButton","sx","display","endIcon","Send","loadingPosition","variant","Message","isOpen","handleClose","data","signup","otherProps","id","useMemo","nanoid","htmlFor","width","children","onClose","autoHideDuration","anchorOrigin","vertical","horizontal","justifyContent","alignItems","height","backgroundColor","severity","setState","useCallback","target","prevState","e","preventDefault"],"sourceRoot":""}